import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';

import 'package:camera/camera.dart';
import 'package:path_provider/path_provider.dart';
import 'package:video_converter/video_converter.dart';
import 'package:file_sharing/file_sharing.dart';

// –†–∞–±–æ—Ç—É —Å –∫–∞–º–µ—Ä–æ–π –≤–∑—è–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç –ø–ª–∞–≥–∏–Ω–∞ camera.
List<CameraDescription> cameras;

Future<void> main() async {
  try {
    cameras = await availableCameras();
  } on CameraException catch (e) {
    logError(e.code, e.description);
  }
  runApp(MyApp());
}

void logError(String code, String message) =>
    print('Error: $code\nError Message: $message');

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Video Catalog'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}


// –≠–∫—Ä–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
// - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω—è—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ
// - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –≤–∏–¥–µ–æ
// - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é (–≤—ã—Ä–µ–∑–∞–µ—Ç –∫—É—Å–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å–µ–∫—É–Ω–¥—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 5—Å–µ–∫) –∏ —à–∞—Ä–∏–Ω–≥ –≤–∏–¥–µ–æ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ü–µ—Ä–µ–¥ —à–∞—Ä–∏–Ω–≥–æ–º –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É. 
// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç –ø–ª–∞–≥–∏–Ω–∞ [VideoConverter] –ø–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–æ–º—É  
// –ø–ª–∞–≥–∏–Ω—É [FileSharing].

class _MyHomePageState extends State<MyHomePage> {
  StreamSubscription<dynamic> _converterEventSubscription;
  ConvertStatus _convertStatus;
  List<VideoFile> _videosList = [];
  CameraController _controller;
  String _currentRecordingPath;

  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  void initState() {
    super.initState();
    _controller = CameraController(cameras[0], ResolutionPreset.medium);
    _controller.initialize().then((_) {
      if (!mounted) {
        return;
      }
      _controller.addListener(_cameraStateChanged);
      setState(() {});
    });
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞, –≤–µ–¥—å –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
    _converterEventSubscription = VideoConverter.onConvertStatusChanged.listen(_onConvertStatusChanged);
    _updateVideoCatalogInfo();
  }

  // Incoming updates from VideoConverter plugin
  // –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç 'success', —Ç–æ —à–∞—Ä–∏–º –≤–∏–¥–µ–æ
  void _onConvertStatusChanged(ConvertStatus convertStatus) {
    _convertStatus = convertStatus;
    print(_convertStatus);
    if (mounted) {
      if (_convertStatus.status == ConvertStatusType.success) {
        FileSharing.share(_convertStatus.outputFilePath);
      }
      setState(() {});
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–∂–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞.
  Widget getConverterStatusWidget() {
    if (_convertStatus == null) {
      return null;
    }
    switch (_convertStatus.status) {
      case ConvertStatusType.failed:
        return Text('=(');
      case ConvertStatusType.inProcess:
        return Center(
          child: CupertinoActivityIndicator(animating: true,),
        );
      case ConvertStatusType.success:
        return Text('');
    }
    return null;
  }

  // –°–æ–∑–¥–∞–µ–º FileStat –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ –º–∞—Å—Å–∏–≤—É –∏–∑ –Ω–∏—Ö —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è
  // —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
  void _updateVideoCatalogInfo() async {
    _videosList.clear();
    final Directory extDir = await getApplicationDocumentsDirectory();
    Directory('${extDir.path}/records')
      .list(recursive: false, followLinks: false)
      .listen((FileSystemEntity entity) {
        FileStat stat = FileStat.statSync(entity.path);
        if (stat.type == FileSystemEntityType.file) {
          _videosList.add(VideoFile(
            name: '${stat.size.toString()} bytes',
            path: entity.path,
            created: stat.changed.toString()
          ));
        }
        setState(() {});
      });
  }

  void _cameraStateChanged() {
    setState(() {});
  }

  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —Å–Ω–∏–º–∞–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–∑–∞–ø—É—Å–∫' –∏–ª–∏ '—Å—Ç–æ–ø'
  Widget _controlButtons() {
    return !_controller.value.isRecordingVideo ?
    CupertinoButton(
      child: Text('‚óâ', style: TextStyle(fontSize: 80, color: Colors.red),),
      onPressed: () {
        // TODO –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–°—Ç–∞—Ä—Ç', –≤–∏–∑—É–∞–ª—å–Ω–æ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ—Å—Ö–æ–¥–∏—Ç, —Ö–æ—Ç—è –∏–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏. 
        // –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ —ç—Ç–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å loading activity –¥–æ–ø—É—Å—Ç–∏–º.
        onVideoRecordButtonPressed();
      },
    ) :
    CupertinoButton(
      child: Text('‚úãüèª', style: TextStyle(fontSize: 80)),
      onPressed: () {
        onStopButtonPressed();
      },
    );
  }
   
  // Display the preview from the camera (or a message if the preview is not available).
  Widget _cameraPreviewWidget() {
    if (_controller == null || !_controller.value.isInitialized) {
      return const Text(
        'Tap a camera',
        style: TextStyle(
          color: Colors.white,
          fontSize: 24.0,
          fontWeight: FontWeight.w900,
        ),
      );
    } else {
      return AspectRatio(
        aspectRatio: _controller.value.aspectRatio,
        child: CameraPreview(_controller),
      );
    }
  }

  String _timestamp() => DateTime.now().millisecondsSinceEpoch.toString();

  void _showInSnackBar(String message) {
    _scaffoldKey.currentState.showSnackBar(SnackBar(content: Text(message)));
  }

  void onVideoRecordButtonPressed() {
    startVideoRecording().then((String filePath) {
      if (mounted) setState(() {});
      if (filePath != null) _showInSnackBar('Saving video to $filePath');
      _updateVideoCatalogInfo();
    });
  }

  Future<void> onStopButtonPressed() async {
    stopVideoRecording().then((_) {
      if (mounted) setState(() {});
      _showInSnackBar('Video recorded to: $_currentRecordingPath');
      _updateVideoCatalogInfo();
    });
  }

  Future<String> startVideoRecording() async {
    if (!_controller.value.isInitialized) {
      _showInSnackBar('Error: select a camera first.');
      return null;
    }

    final Directory extDir = await getApplicationDocumentsDirectory();
    final String dirPath = '${extDir.path}/records';
    await Directory(dirPath).create(recursive: true);
    final String filePath = '$dirPath/${_timestamp()}.mp4';

    if (_controller.value.isRecordingVideo) {
      // A recording is already started, do nothing.
      return null;
    }

    try {
      _currentRecordingPath = filePath;
      await _controller.startVideoRecording(filePath);
    } on CameraException catch (e) {
      _showCameraException(e);
      return null;
    }
    return filePath;
  }

  Future<void> stopVideoRecording() async {
    if (!_controller.value.isRecordingVideo) {
      return null;
    }

    try {
      await _controller.stopVideoRecording();
    } on CameraException catch (e) {
      _showCameraException(e);
      return null;
    }
  }

  void _showCameraException(CameraException e) {
    logError(e.code, e.description);
    _showInSnackBar('Error: ${e.code}\n${e.description}');
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Text(widget.title),
        leading: getConverterStatusWidget(),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Expanded(
              child: Container(
                child: ListView(
                  children: _videosList.map((videoFile) => VideoListItem(
                    nameTitle: videoFile.name,
                    createdTitle: videoFile.created,
                    onShareTap: () {
                      // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–µ—Ç—Å—è FileSharing.share
                      VideoConverter.convert(videoFile.path);
                    },
                  )).toList(),
                ),
              ),
            ),
            Container(
              height: 250,
              color: Colors.black12,
              child: Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  mainAxisSize: MainAxisSize.max,
                  children: <Widget>[
                    _cameraPreviewWidget(),
                    _controlButtons()
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() async {
    _controller.removeListener(_cameraStateChanged);
    await _converterEventSubscription?.cancel();
    super.dispose();
  }
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç—Å–Ω—è—Ç–æ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ.
class VideoFile {
  final String name;
  final String created;
  final String path;

  VideoFile({this.created, this.name, this.path});
}

// –≠–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ, –≥–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –≤–∏–¥–µ –≤ –ø–∞–ø–∫–µ.
// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∏–¥–µ–æ –∑–∞–ø–∏—Å—å, —Å –∫–Ω–æ–ø–Ω–æ–π 'share'
class VideoListItem extends StatelessWidget {
  final String nameTitle;
  final String createdTitle;
  final VoidCallback onShareTap;

  VideoListItem({this.nameTitle = 'noname', this.createdTitle = '', this.onShareTap});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 60,
      color: Colors.white,
      child: Column(
        children: <Widget>[
          Expanded(
            child: Padding(
              padding: const EdgeInsets.only(left: 16),
              child: Row(
                children: <Widget>[
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: <Widget>[
                        Text('Video file  $nameTitle'),
                        Text(createdTitle)
                      ],
                    ),
                  ),
                  CupertinoButton(
                    child: Text(
                      'Cut & Share',
                      style: TextStyle(
                        fontSize: 18,
                      ),
                    ),
                    onPressed: onShareTap,
                  )
                ],
              ),
            ),
          ),
          Container(
            height: 0.5,
            color: Colors.black,
          )
        ],
      ),
    );
  }
}